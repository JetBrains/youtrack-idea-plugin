plugins {
    id 'org.jetbrains.intellij' version '1.12.0'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'idea'
}

allprojects {

    group 'com.github.jk1'
    sourceCompatibility = 17
    targetCompatibility = 17

    if (project.hasProperty('teamcity')) {
        project.version = project.teamcity['build.number']
    } else {
        version '9999.9.9' // dev version
    }
    repositories {
        mavenCentral()
    }
}

def supportedVersions = ['IU-2021.1', 'IU-2021.2', 'IU-2021.3', 'IU-2022.1', 'IU-2022.2', 'IU-LATEST-EAP-SNAPSHOT', 'IU-LATEST-TRUNK-SNAPSHOT']

intellij {
    pluginName = 'ytplugin'
    version = project.hasProperty('ideaVersion') ? project.ideaVersion : 'IU-LATEST-EAP-SNAPSHOT'
    println "This build uses IDEA Ultimate ${version.get()}"
    try {
        def compatibleJS = ['IU-2021.1', 'IU-2021.2', 'IU-2021.3', 'IU-2022.1', 'IU-2022.2']
        if (compatibleJS.contains(version.toString())) {
            plugins = ['JavaScriptLanguage', 'JavaScriptDebugger', 'tasks']
        } else {
            plugins = ['JavaScript', 'JavaScriptDebugger', 'tasks']
        }    } catch (ignored){
        plugins = ['tasks']
    }
    updateSinceUntilBuild = false
    instrumentCode = false
}

idea {
    module {
        downloadSources = true
        outputDir file("$buildDir/idea/main")
        testOutputDir file("$buildDir/idea/test")
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}

publishPlugin {
    token = project.findProperty("marketplaceToken") ?: ""
    channels = ['stable']
}

dependencies {
    implementation project(':api')
    implementation "org.nanohttpd:nanohttpd:2.3.0"
//    implementation "org.apache.httpcomponents:httpclient:4.5.13"

    testImplementation 'junit:junit:4.12'
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    outputs.upToDateWhen { false }
}

// runs `./gradlew test` several times against all supported IDE versions
task testAllSupportedIdes {
    def taskNames = supportedVersions.collect { "runTestsWithIdea$it" }
    dependsOn taskNames.first()
    supportedVersions.eachWithIndex { version, index ->
        task "runTestsWithIdea$version"(type: GradleBuild) {
            if (index != supportedVersions.size() - 1) {
                dependsOn taskNames.get(index + 1)
            }
            buildName = "runTestsWithIdea$version"
            buildFile = 'build.gradle'
            tasks = ['test']
            startParameter.projectProperties = [ideaVersion: version]
        }
    }
}

// Travis CI
check.dependsOn testAllSupportedIdes

